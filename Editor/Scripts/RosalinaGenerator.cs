#if UNITY_EDITOR
using System.IO;
using UnityEngine;

internal static class RosalinaGenerator
{
    public const string RosalinaFolderName = "Rosalina";
    public const string RosalinaGeneratedCodeFolderName = "AutoGenerated";
    public const string RosalinaEditorGeneratedCodeFolderName = "Editor";

    /// <summary>
    /// Creates the auto generated code file path based on the given UI document asset.
    /// </summary>
    /// <param name="documentAsset">UI Document asset.</param>
    /// <returns>Auto generated file path.</returns>
    public static string BuildAutoGeneratedFilePath(UIDocumentAsset documentAsset)
    {
        string documentBindingsFileName = $"{documentAsset.Name}.g.cs";
        string autogeneratedFolder = Path.Combine("Assets", RosalinaFolderName, RosalinaGeneratedCodeFolderName);

        if (documentAsset.UxmlDocument.IsEditorExtension)
        {
            autogeneratedFolder = Path.Combine(autogeneratedFolder, RosalinaEditorGeneratedCodeFolderName);
        }

        if (!Directory.Exists(autogeneratedFolder))
        {
            Directory.CreateDirectory(autogeneratedFolder);
        }

        return Path.Combine(autogeneratedFolder, documentBindingsFileName);
    }

    /// <summary>
    /// Generates a C# script containing the bindings of the given UI document.
    /// </summary>
    /// <param name="document">UI Document.</param>
    /// <param name="outputFile">Output file.</param>
    /// <returns>Rosalina generation result.</returns>
    public static void GenerateBindings(UIDocumentAsset document, string outputFile)
    {
        IRosalinaGeneartor generator = document.UxmlDocument.IsEditorExtension ? 
            new RosalinaEditorWindowBindingsGeneartor() : 
            new RosalinaBindingsGenerator();

        Debug.Log($"[Rosalina]: Generating UI bindings for {document.FullPath}");

        RosalinaGenerationResult result = generator.Generate(document);
        result.Save(outputFile);

        Debug.Log($"[Rosalina]: Done generating: {document.Name} (output: {outputFile})");
    }

    /// <summary>
    /// Geneartes a C# script for the UI logic.
    /// </summary>
    /// <param name="document">UI Document asset information.</param>
    /// <param name="outputFile">Output file.</param>
    /// <returns>Rosalina generation result.</returns>
    public static void GenerateScript(UIDocumentAsset document, string outputFile)
    {
        IRosalinaGeneartor generator = document.UxmlDocument.IsEditorExtension ?
            new RosalinaEditorWindowScriptGenerator() :
            new RosalinaScriptGenerator();

        Debug.Log($"[Rosalina]: Generating UI script for {outputFile}");

        RosalinaGenerationResult result = generator.Generate(document);
        result.Save(outputFile);

        Debug.Log($"[Rosalina]: Done generating: {document.Name} (output: {outputFile})");
    }
}

#endif